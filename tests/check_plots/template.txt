
<h1>This is a sample report</h1>
<h2>Static plots</h2>
<h2>Heatmap example</h2>

<!--begin.rcode 

    mod_func <- function(data_frame){
       mod_table <- reshape2::melt(as.matrix(data_frame)) 
       colnames(mod_table) <- c("x_axis", "y_axis", "Freq")
       n_columns <-  check_numeric_fields(mod_table)

       mod_table[,n_columns] <- lapply(mod_table[,n_columns], 
        function(col) {
             if (!is.factor(col)){
                as.numeric(col) 
             } else {
                col
             }
       })
       mod_table$Freq <- log(mod_table$Freq + 1)
       return(mod_table)
    }
       col <-  c("#0000D5","#FFFFFF","#D50000")
       text_colour <-  "black"
       na_col <-  "grey50"

	   cat(plotter$static_ggplot_main("data_toc_sample.txt", header = T, func = mod_func, smp_attr = c(17),plotting_function = function(ggplot_obj) {
    
       ggplot_obj + ggplot2::aes(x = x_axis, y = y_axis, fill =Freq) +
       ggplot2::geom_tile(show.legend = TRUE) +
       ggplot2::theme_minimal() +
       ggplot2::theme(panel.grid.major = ggplot2::element_blank()) +
       ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 25, face = "bold", hjust = 1), axis.text.y = ggplot2::element_text(face = "bold")) +
       ggplot2::scale_fill_gradient2(low = col[1], mid= col[2], high = col[3], na.value = na_col, guide = "colourbar", aesthetics = "fill")
	}))
   end.rcode-->

<h2>Mermaid chart example</h2>

<!--begin.rcode

   cat(plotter$mermaid_chart('
---
config:
  theme: dark
---
flowchart LR
    1A[Option Parsing]
    1B[/opt/]
    subgraph Input preparison
        A[Target generation] 
        B[Read count table]
        C[Read External DE data]
        D[Read Library size files] 
    end
    E["`**main_degenes_Hunter**`"]
    EE[/final_results/]
    LL[main_report.Rmd]
    subgraph Writting
        F[write.table]
        H>filtered_count_data.txt]
        G>control_treatment.txt]
        I>hunter_results_table.txt]
        J["`**write_df_list_as_tables** (Normalized_counts)`"]
        K["`**write_df_list_as_tables** (allgenes)`"]
        L["`**write_expression_report**`"]
        M>"DEG_report.html"]   
        
    end

    1A --> 1B
    1B -- target_file
          Treatment_columns
          Control_columns --> A

    1B --input_file--> B
    1B --external_DEA_file--> C
    1B --library_sizes-->D
    1B --> E
    A & B & C & D --> E
    E  ==> EE
    1B -- output_files --> Writting
    EE --> F 
    EE --all_data_normalized---> J
    EE --"all_counts_for_plotting"---> K
    F  --"raw_filter"--> H
    F  --"sample_group"--> G
    F  --"DE_all_genes"--> I
    EE & LL --> L
    L --> M      
    
    '))
end.rcode-->

<h2>Table parser (Bootstrap)</h2>

<!--begin.rcode
    
    plotter$hash_vars[["test_data_frame"]] <- data.frame( "V1" = c("h0","r1", "r2", "r3"), 
                                "V2" = c("h1", "-","smp_attr1", "smp_attr2"),
                                "V3" = c("h2", "var_attr1", 1,2), 
                                "V4" = c("h3", "var_attr2",3,4), 
                                row.names = c(1,2,3,4))

    cat(plotter$table("test_data_frame", header = TRUE, row_names = TRUE, smp_attr = c(1), var_attr = c(1), attrib = list('class' = 'table table-striped')))


end.rcode-->



<h2>Table parser (DataTable)</h2>


<!--begin.rcode
    
    cat(plotter$table("test_data_frame", header = TRUE, row_names = TRUE, smp_attr = c(1), var_attr = c(1), styled = "dt"))


end.rcode-->
